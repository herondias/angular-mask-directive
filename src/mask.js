// Generated by CoffeeScript 1.3.3

/*
 Attaches jquery-ui input mask onto input element
*/


(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  angular.module('ui.directives').directive('uiMask', [
    '$parse', 'uiConfig', function($parse, uiConfig) {
      var defaultConfig, directive, getKeyCode, maskValue, parseMask, setRange;
      defaultConfig = {
        rules: {
          'z': /[a-z]/,
          'Z': /[A-Z]/,
          'a': /[a-zA-Z]/,
          '*': /[0-9a-zA-Z]/,
          '@': /[0-9a-zA-ZçÇáàãâéèêíìóòôõúùü]/,
          '9': /[0-9]/
        },
        keyCodes: {
          8: 'backspace',
          9: 'tab',
          13: 'enter',
          16: 'shift',
          17: 'control',
          18: 'alt',
          27: 'esc',
          33: 'page up',
          34: 'page down',
          35: 'end',
          36: 'home',
          37: 'left',
          38: 'up',
          39: 'right',
          40: 'down',
          45: 'insert',
          46: 'delete',
          116: 'f5',
          123: 'f12',
          224: 'command'
        },
        defaultOptions: {
          type: 'fixed',
          selectCharsOnFocus: true
        },
        namedMaskFormats: {
          'phone': {
            mask: '(99) 9999-9999'
          },
          'phone-us': {
            mask: '(999) 999-9999'
          },
          'date-uk': {
            mask: '39/19/9999'
          },
          'date-us': {
            mask: '19/39/9999'
          },
          'cep': {
            mask: '99999-999'
          },
          'time': {
            mask: '29:59'
          },
          'creditcard': {
            mask: '9999 9999 9999 9999'
          },
          'integer': {
            mask: '999.999.999.999',
            type: 'reverse'
          },
          'decimal': {
            mask: '99,999.999.999.999',
            type: 'reverse',
            defaultValue: '000'
          },
          'decimal-us': {
            mask: '99.999,999,999,999',
            type: 'reverse',
            defaultValue: '000'
          },
          'signed-decimal': {
            mask: '99,999.999.999.999',
            type: 'reverse',
            defaultValue: '+000'
          },
          'signed-decimal-us': {
            mask: '99,999.999.999.999',
            type: 'reverse',
            defaultValue: '+000'
          }
        }
      };
      angular.extend(defaultConfig, uiConfig.mask);
      getKeyCode = function(e) {
        var _ref, _ref1;
        return (_ref = (_ref1 = e.charCode) != null ? _ref1 : e.keyCode) != null ? _ref : e.which;
      };
      directive = {
        require: 'ngModel',
        link: function($scope, $element, $attrs, $modelCtrl) {
          var config, ignoreKeyPress, isReadonly, mask, onBlur, onChange, onFocus, onKeyDown, onKeyPress, onKeyUp, onPaste;
          config = angular.copy(defaultConfig);
          mask = {};
          ignoreKeyPress = false;
          $scope.$watch($attrs.uiMask, function(value, original) {
            if (value === original) {
              return;
            }
            mask = parseMask(value, config.defaultOptions);
            return $element.bind({
              keydown: onKeyDown,
              keypress: onKeyPress,
              keyup: onKeyUp,
              paste: onPaste,
              focus: onFocus,
              blur: onBlur,
              change: onChange
            });
          });
          controller.$formatters.push(function(value) {
            return maskValue(value);
          });
          onKeyDown = function(e) {
            var keyCode;
            if (isReadonly()) {
              return;
            }
            keyCode = getKeyCode(e);
            return ignoreKeyPress = __indexOf.call(config.keyCodes, keyCode) >= 0 || e.ctrlKey || e.metaKey || e.altKey;
          };
          onKeyPress = function(e) {
            if (isReadonly() || ignoreKeyPress) {

            }
          };
          onKeyUp = function(e) {
            if (isReadonly() || ignoreKeyPress) {

            }
          };
          onPaste = function() {
            if (isReadonly()) {

            }
          };
          onFocus = function() {
            if (mask.selectCharsOnFocus) {
              return $element.select();
            }
          };
          onBlur = function() {};
          onChange = function() {};
          return isReadonly = function() {
            return $attrs('readonly');
          };
        }
      };
      parseMask = function(maskAttr, config) {
        var chars, mask, placeholder, _ref;
        if (angular.isString(maskAttr)) {
          mask = (_ref = config.namedMaskFormats[maskAttr]) != null ? _ref : {
            format: maskAttr
          };
        } else if (angular.isObject(maskAttr)) {
          mask = maskAttr;
        } else {
          throw new Error('Invalid mask: ' + maskAttr);
        }
        mask = angular.extend({}, config.defaultOptions, mask);
        mask.placeholders = (function() {
          var _i, _len, _ref1, _results;
          _ref1 = mask.format.split('');
          _results = [];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            chars = _ref1[_i];
            _results.push({
              char: char,
              rule: options.rules[char]
            });
          }
          return _results;
        })();
        mask.value = (function() {
          var _i, _len, _ref1, _results;
          _ref1 = mask.placeholders;
          _results = [];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            placeholder = _ref1[_i];
            if (placeholder.rule != null) {
              _results.push('');
            } else {
              _results.push(placeholder.char);
            }
          }
          return _results;
        })();
        return mask;
      };
      maskValue = function(mask, value, start, end) {
        var maskChar, maskEnd, maskPos, maskStart, valueChar, valueEnd, valuePos, _results;
        valuePos = 0;
        valueEnd = value.length;
        maskStart = start != null ? start : 0;
        maskEnd = end != null ? end : mask.format.length;
        maskPos = 0;
        _results = [];
        while (valuePos < valueEnd && maskPos < maskEnd) {
          valueChar = value.charAt(valuePos);
          maskChar = mask.placeholders[maskPos];
          if (maskChar.rule != null) {
            if (maskChar.rule.match(valueChar)) {
              mask.value[maskPos] = valueChar;
              maskPos += 1;
              _results.push(valuePos += 1);
            } else {

            }
          } else {
            mask.value[maskPos] = maskChar.char;
            _results.push(maskPos += 1);
          }
        }
        return _results;
      };
      return setRange = function(input, start, end) {
        var maskPos, pos, range;
        if (end == null) {
          end = start;
        }
        if (input.setSelectionRange) {
          return input.setSelectionRange(start, end);
        } else {
          range = input.createTextRange();
          range.collapse();
          range.moveStart('character', start);
          range.moveEnd('character', end - start);
          range.select();
          if (!$.browser.msie) {
            return {
              start: input.selectionStart,
              end: input.selectionEnd
            };
          }
          pos = {
            start: 0,
            end: 0
          };
          range = document.selection.createRange();
          pos.start = 0 - range.duplicate().moveStart('character', -100000);
          maskPos = 0;
          pos.end = pos.start + range.text.length;
          return pos;
        }
      };
    }
  ]);

}).call(this);
